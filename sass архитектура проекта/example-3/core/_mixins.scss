@function em($target, $context: $font-size-base) {
  @if $target == 0 {
    @return 0
  }
  @return $target / $context + 0em;
}

@function cp($target, $context: $center-width) {
  @if $target == 0 {
    @return 0
  }
  @return $target / $context * 100%;
}

@mixin import-font($name, $path) {
    @font-face {
        font-family: $name;
        src: url($path + '.eot');
        src: url($path + '.eot?#iefix') format('embedded-opentype'),
             url($path + '.svg') format('svg'),
             url($path + '.woff') format('woff'),
             url($path + '.ttf') format('truetype');

        font-weight: normal;
        font-style: normal;
    }
}

@mixin grayscale {
    /* autoprefixer: off */
    -webkit-filter: grayscale(100%);
    -moz-filter: grayscale(100%);
    -ms-filter: grayscale(100%);
    -o-filter: grayscale(100%);
    filter: grayscale(100%);
    filter: url(./grayscale.svg);
    filter: gray;
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

@mixin button-color($color) {
  background-color: $color;

  &:hover,
  &:active {
    background: call(nth($btn-hover, 1), $color, nth($btn-hover, 2));
  }
}

@mixin fade-out-line($color: #fff) {
  overflow: hidden;
  white-space: nowrap;

  position: relative;

  &::after {
      content: "";
      display: block;

      width: 18px;

      background-image: linear-gradient(90deg, rgba($color, 0) 0%, $color 100%);

      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
  }
}

@mixin placeholder-color($color) {
    &.placeholder {
        color: $color;
    }
    &:-ms-input-placeholder {
        color: $color;
    }
    &:-moz-placeholder {
        color: $color;
    }
    &::-moz-placeholder {
        color: $color;
    }
    &:-webkit-input-placeholder {
        color: $color;
    }
    &::-webkit-input-placeholder {
        color: $color;
    }
}

@mixin reset-btn() {
    border: none;
    background: none;
    outline: none;
    margin: 0px;
    padding: 0px;
    cursor: pointer;
}

@mixin absolute-center-block() {
    position: absolute;
    left: 50%;
    top: 50%;
    @include translate(-50%, -50%);
}

@mixin center-block($width: auto) {
    margin: 0 auto;
    max-width: $width;
}

@mixin center() {
  @include center-block($center-width + $centerPadding * 2);

  padding: 0 em($centerPadding);

  box-sizing: border-box;
}

@mixin inline-column-container($width: false) {
  @if $width != false {
    width: $width;
  }
    text-align: justify;
    &:after {
        content: "";
        width: 100%;
        display: inline-block;
    }
}

@mixin inline-column($width: false) {
    display: inline-block;
    vertical-align: top;
    text-align: left;
    @if $width != false {
        width: $width;
    }
}

@mixin inline-box($width: false) {
  display: inline-block;
  vertical-align: top;
  @if $width != false {
    width: $width;
  }
}

$photoshop-global-light: 120deg !default;

//--------------------------------
// Photoshop Shadow Function
//--------------------------------
@function photoshop-shadow( $angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000, $inner: false ) {
  // default to degrees, same as photoshop
  @if unitless($angle) {
    $angle: $angle * 1deg;
  }

  // compass has a bug converting degrees (fixed in Compass 0.12)
  // https://github.com/chriseppstein/compass/pull/666
  @if unit($angle) ==  'deg' {
    // convert to radians to avoid issues
    $angle: ((180 - ($angle/1deg)) * pi() / 180);
  }
  //TODO: other angle units, including rad, will cause issues

  // SASS doesn't do percentages cleanly
  @if not(unitless($spread)) and unit($spread) == '%' {
    // remove the percentage unit
    $spread: $spread/1%;
  } @else if $spread < 0 {
    // correct for passing the spread as a decimal
    $spread: $spread * 100;
  }

  $h-shadow: round(cos($angle) * $distance);
  $v-shadow: round(sin($angle) * $distance);
  $css-spread: $size * ($spread/100);
  $blur: $size - $css-spread;
  $inset: if($inner != false, 'inset', '');

  @return ( $h-shadow $v-shadow $blur $css-spread $color unquote($inset) );
}

@function photoshop-text-shadow( $angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000 ) {
  $shadow: photoshop-shadow($angle, $distance, $spread, $size, $color);
  @return (nth($shadow, 1) nth($shadow, 2) nth($shadow, 3) nth($shadow, 5));
}

@function photoshop-glow($choke: 0, $size: 0, $color: #fff, $inner: false) {
  @return photoshop-shadow(0, 0, $choke, $size, $color, $inner);
}

//--------------------------------
// Photoshop Drop Shadow
//--------------------------------
@mixin photoshop-drop-shadow ($angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000) {
  @include box-shadow(photoshop-shadow($angle, $distance, $spread, $size, $color));
}

//--------------------------------
// Photoshop Inner Shadow
//--------------------------------
@mixin photoshop-inner-shadow ($angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000) {
  @include box-shadow(photoshop-shadow($angle, $distance, $spread, $size, $color, true));
}

//--------------------------------
// Photoshop Text Shadow
//--------------------------------
@mixin photoshop-text-shadow ($angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000) {
  // NOTE: $spread has no effect for text shadows
  @include text-shadow(photoshop-text-shadow($angle, $distance, $spread, $size, $color));
}

//--------------------------------
// Photoshop Outer Glow
//--------------------------------
@mixin photoshop-outer-glow ($choke: 0, $size: 0, $color: #fff) {
  // experimantal
  // noise, technique, source: center, and quality are not supported
  @include box-shadow(photoshop-glow($choke, $size, $color, false));
}

//--------------------------------
// Photoshop Inner Glow
//--------------------------------
@mixin photoshop-inner-glow ($choke: 0, $size: 0, $color: #fff) {
  // experimantal
  // noise, technique, source: center, and quality are not supported
  @include box-shadow(photoshop-glow($choke, $size, $color, true));
}